# -*- coding: utf-8 -*-
"""BluePoints_IA_GS3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JuKyxUqNkKU7Q0LgwFuJE_WVJR7I6hjj

# BluePoints
üêã Transforme lixo em pontos
<br>
Pontos em recompensas
<br>
Gere um mundo mais azul üíô

<br>

**üìç Aviso Importante:** o conte√∫do abaixo √© um MVP da solu√ß√£o e a conex√£o √† interface da aplica√ß√£o √© simulada.

<br>

**üí° Nota:** o nome image_file deve ser alterado nos c√≥digos abaixo pelo caminho adequado da sua imagem

# API do Roboflow
Habilitando o uso do modelo do Roboflow no Colab. Aqui √© poss√≠vel testar localmente com upload de imagens na pasta content.

<br>

As classes reconhec√≠veis s√£o: cardboard, bottleCap, glass, metal e paper
"""

# Instalando infer√™ncia
!pip install inference

# Instalando supervis√£o
!pip install supervision

# Importando os pacotes necess√°rios
import supervision as sv
import cv2

from inference import get_roboflow_model
from inference import get_model
from collections import Counter

# Habilitando uso do modelo
image_file = "/1.png"
image = cv2.imread(image_file)

model = get_roboflow_model(model_id="bluepoints/1", api_key= "v3ouFVD24hflkTp7UR8i")

results = model.infer(image)

detections = sv.Detections.from_inference(results[0].dict(by_alias=True, exclude_none=True))

# Carregando um modelo e visualizando infer√™ncia
image = "/1.png"

model = get_model(model_id="bluepoints/1")

results = model.infer(image)

# Visualizando resultados do reconhecimento de imagem
image_file = "/1.png"
image = cv2.imread(image_file)

model = get_model(model_id="bluepoints/1")

results = model.infer(image)

detections = sv.Detections.from_inference(results[0].dict(by_alias=True, exclude_none=True))

bounding_box_annotator = sv.BoundingBoxAnnotator()
label_annotator = sv.LabelAnnotator()

annotated_image = bounding_box_annotator.annotate(
    scene=image, detections=detections)
annotated_image = label_annotator.annotate(
    scene=annotated_image, detections=detections)

sv.plot_image(annotated_image)

"""# Atribui√ß√£o de pontos
Atribuindo pontos conforme dados identificados na imagem
"""

def funcao_pontos():
  '''Fun√ß√£o de extra√ß√£o de pontos do output do modelo de reconhecimento de objeto.'''

  # detectando o nome da classe
  for detection in detections:
    class_name = detection[5]['class_name']

  # detectando a quantidade de objetos identificados
  classes = [detection[5]['class_name'] for detection in detections]
  counts = Counter(classes)

  # printando resultdo de cada detec√ß√£o
  for class_name, count in counts.items():
      print(f"Detectamos {count} objeto de: {class_name}")


  if class_name == 'bottleCap':
    points_calculated = 1000
  elif class_name == 'cardboard':
    points_calculated = 30
  elif class_name == 'cup':
    points_calculated = 2000
  elif class_name == 'glass':
    points_calculated = 500
  elif class_name == 'metal':
    points_calculated = 750
  elif class_name == 'paper':
    points_calculated = 10
  elif class_name == 'plastic':
    points_calculated = 1000
  else:
    points_calculated = 0
  print(f'Os seus pontos s√£o: {points_calculated}')

# retornando os pontos da pessoa
pontos = funcao_pontos()

"""# Conectando Python ao BD
Os dados a serem extra√≠dos da imagem ser√£o retornados ao banco de dados a fim de que o usu√°rio possa consultar os pontos conseguidos ap√≥s upload de cada imagem tirada de suas coletas.
"""

# instalando a biblioteca OracleDB
!pip install oracledb

# importando bibliotecas
from flask import Flask, request, jsonify
import oracledb

def tranforma_em_ponto(caminho_da_imagem):
    '''Fun√ß√£o que transforma os dados da imagem  captada no aplicativo em pontos'''
    pontos = funcao_pontos
    return pontos

# Conectando os dados reconhecidos da imagem ao Banco de Dados
app = Flask(__name__)
# Rota de exemplo
@app.route('/')
def home():
    return "ROTA NULA"

# Rota para receber dados via POST
@app.route('/dados', methods=['POST'])
def post_dados():
  '''Fun√ß√£o para cadastro de pontos no banco de dados'''
  novo_dado = request.get_json()
  print(novo_dado)
  id_desejado_string = novo_dado["id_pessoa"]
  print(id_desejado_string)
  id_desejado_int = int(id_desejado_string)
  print(id_desejado_int)

  # Conexao com o banco
  conn = oracledb.connect(user="rm552295",
                          password="050405",
                          host="oracle.fiap.com.br",
                          port=1521,
                          service_name="ORCL")
  cursor = conn.cursor()

  # Aqui pesquisa as fotos ainda n√£o avaliadas da pessoa que a ana mandar
  cursor.execute(f"SELECT * FROM TB_BP_RECICLAGEM WHERE usuario = {id_desejado_int} and validado = 0")
  resultado = cursor.fetchall()
  print(resultado)
  for imagem in resultado: # Aqui vai ter um la√ßo para CADA a reciclagem n√£o consultada da pessoa em quest√£o
      id_usuario = imagem[4]
      cursor.execute(f"SELECT * FROM TB_BP_USUARIO WHERE pessoa = {id_pessoa}")
      lista_usuarios = cursor.fetchall()
      id_pessoa = lista_usuarios[0][3]

      cursor.execute(f"SELECT * FROM TB_BP_PESSOA WHERE id_pessoa = {id_pessoa}")
      lista_pessoa = cursor.fetchall()
      pontos_atuais  = lista_pessoa[0][1] # Recupera os pontos atuais da pessoa

      id_foto = imagem[1] # Id para foto
      cursor.execute(f"SELECT * FROM TB_BP_FOTO WHERE id_foto = {id_foto}")
      todas_fotos = cursor.fetchall()
      caminho_foto = todas_fotos[0][1] # Recupera o caminho salvo no banco

      print(caminho_foto) # ISSO AQUI √â O CAMINHO
      pontos_adiquiridos = tranforma_em_ponto(caminho_foto)
      cursor.execute(f"UPDATE TB_BP_RECICLAGEM SET validado = 1, pontos = {pontos_adiquiridos} WHERE foto = {id_foto}") # Atualizo os pontos da reciclagem
      novos_pontos = pontos_atuais + pontos_adiquiridos # Somo os pontos da reciclagem com os que a pessoa j√° tinha
      cursor.execute(f"UPDATE TB_BP_PESSOA SET pontos = {novos_pontos} WHERE id_pessoa = {id_pessoa}") # Atualizo os pontos da pessoa

      conn.commit() # Dou um commit pra salvar tudo feito

  return jsonify("Enviado com sucesso para python"), 201

if __name__ == '__main__':
    app.run(debug=True, port=5000)

"""Abaixo um exemplo de conex√£o com o FrontEnd representativo da Etapa 05 do projeto, apresentado no Pitch. O objetivo √© ilustrar a integra√ß√£o entre os componentes e demonstrar o potencial de desenvolvimento e colabora√ß√£o da solu√ß√£o ao futuro da sustentabilidade com Deep Learning."""

# Fetch no aplicativo em React Native
"""

// Exemplo de solicita√ß√£o POST
fetch('http://localhost:5000/dados', {
method: 'POST',
headers: {
    'Content-Type': 'application/json',
},
body: JSON.stringify({
    id_pessoa: 'id_da_pessoa_ativa_na_conta_neste_momento',
}),
})
.then(response => response.json())
.then(data => {
    console.log('Resposta do servidor:', data);
})
.catch(error => {
    console.error('Erro:', error);
});
"""

"""# Conclus√£o
A acur√°cia de identifica√ß√£o dos itens √© de 78% e junto √† solu√ß√£o proposta traz uma nova forma de engajar a popula√ß√£o a contribuir com a preserva√ß√£o da biodiversidade por meio da pontua√ß√£o pelo esfor√ßo empregado em recolhimento do lixo. Futuramente, o modelo se aplicar√° a ambientes urbanizados e florestais, expandindo a prote√ß√£o ambiental.
"""